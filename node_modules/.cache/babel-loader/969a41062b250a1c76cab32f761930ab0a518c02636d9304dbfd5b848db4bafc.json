{"ast":null,"code":"import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport ServicesSlice from \"./reducers/toolSlice/ServicesSlice\";\nimport { api } from \"./api/api\";\nconst rootReducers = combineReducers({\n  services: ServicesSlice,\n  [api.reducerPath]: api.reducer\n});\nexport const store = configureStore({\n  reducer: rootReducers,\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(api.middleware)\n});","map":{"version":3,"names":["configureStore","combineReducers","ServicesSlice","api","rootReducers","services","reducerPath","reducer","store","middleware","getDefaultMiddleware","concat"],"sources":["C:/ReactProjects/Guider/my-app/src/store/store.ts"],"sourcesContent":["import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport ServicesSlice from \"./reducers/toolSlice/ServicesSlice\";\r\nimport { api } from \"./api/api\";\r\n\r\n\r\nconst rootReducers = combineReducers({\r\n    services: ServicesSlice,\r\n    [api.reducerPath]: api.reducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducers,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware)\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch"],"mappings":"AAAA,SAASA,cAAc,EAAEC,eAAe,QAAQ,kBAAkB;AAClE,OAAOC,aAAa,MAAM,oCAAoC;AAC9D,SAASC,GAAG,QAAQ,WAAW;AAG/B,MAAMC,YAAY,GAAGH,eAAe,CAAC;EACjCI,QAAQ,EAAEH,aAAa;EACvB,CAACC,GAAG,CAACG,WAAW,GAAGH,GAAG,CAACI;AAC3B,CAAC,CAAC;AAEF,OAAO,MAAMC,KAAK,GAAGR,cAAc,CAAC;EAChCO,OAAO,EAAEH,YAAY;EACrBK,UAAU,EAAGC,oBAAoB,IAAKA,oBAAoB,CAAC,CAAC,CAACC,MAAM,CAACR,GAAG,CAACM,UAAU;AACtF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}